\\ We are building a static typechecker that will:
    1) Accept subtyping - Example: Bird has subtypes Duck, Ostrich, Parrot 
    2) method/function overloading - Example: having two functions with same name but different parameters
    3) check if a variable is initialized before use 
    4) check if a void is used as a value
    5) check that a function returning non-void always returns something - int foo() {
                                                                                int x;
                                                                                if ( ??? )
                                                                                {return 3;} // Def
                                                                                else {x = 3;} // No
                                                                          } // Definitely Returns + No Return = Maybe Return State
\\ Type Theory Stuff: 

    \\ Notation: Γ ⊢ e1: int  Γ ⊢e2: int    ----> "The environment proves that e1 is of type int, same for e2"
              ----------------------------
                    Γ ⊢ e1 + e2: int       ----> "Both e1 and e2 are of type int, thus they result in an int"


    \\ Environments (Γ): A type environment will match types with their variables. Our program starts
                              with an empty environment until we declare variables. Those variables are
                              assigned a type and then added to the type environment. 

\\ Other Information: 

    \\ Methods Type Checking: method add(a, b) Int { 
                               return a + b; // Type checking error if any type besides Int
                            }
        
        
    \\ Method Void Return Type Checking:  method superMethod() Void {
                                            super.methodToOvverride();
                                            println("This is the super method"); // Type checking error if returns anything
                                         }


    \\ To handle overloading, Professor recommends using the function's name and it's sequence of types
    to determine if functions with same name are truly different. We can assume that the user will 
    specify the types in the parameters

​
